{"version":3,"sources":["webpack:///main.065941beddcd2beb22bc.js","webpack:///./src/index.js","webpack:///./src/api/userApi.js","webpack:///./src/api/baseUrl.js"],"names":["webpackJsonp","module","exports","__webpack_require__","global","_userApi","getUsers","then","result","usersBody","forEach","user","id","firstName","lastName","email","document","getElementById","innerHTML","deleteLinks","getElementsByClassName","Array","from","link","onclick","event","element","target","preventDefault","deleteUser","attributes","value","row","parentNode","removeChild","call","this","_interopRequireDefault","obj","__esModule","default","get","del","url","fetch","baseUrl","onSuccess","onError","request","Request","method","response","json","error","console","log","Object","defineProperty","_baseUrl","_baseUrl2","getBaseUrl","getQueryStringParameterByName","name","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent"],"mappings":"AAAAA,cAAc,IAER,SAASC,EAAQC,EAASC,IAEH,SAASC,GAAS,YCJ/CD,GAAA,EACA,IAAAE,GAAAF,EAAA,IAIA,EAAAE,EAAAC,YAAWC,KAAK,SAAAC,GACd,GAAIC,GAAY,EAEhBD,GAAOE,QAAQ,SAAAC,GACbF,2CAC6BE,EAAKC,GADlC,mDAEQD,EAAKC,GAFb,oBAGQD,EAAKE,UAHb,oBAIQF,EAAKG,SAJb,oBAKQH,EAAKI,MALb,uBASFX,EAAOY,SAASC,eAAe,SAASC,UAAYT,CAEpD,IAAMU,GAAcf,EAAOY,SAASI,uBAAuB,aAI3DC,OAAMC,KAAKH,EAAa,SAAAI,GACtBA,EAAKC,QAAU,SAASC,GACtB,GAAMC,GAAUD,EAAME,MACtBF,GAAMG,kBACN,EAAAvB,EAAAwB,YAAWH,EAAQI,WAAW,WAAWC,MACzC,IAAMC,GAAMN,EAAQO,WAAWA,UAC/BD,GAAIC,WAAWC,YAAYF,UDMHG,KAAKjC,EAAU,WAAa,MAAOkC,WAI3D,SAASnC,EAAQC,KAKhB,CAED,SAASD,EAAQC,EAASC,GAE/B,YAcA,SAASkC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GE1DjF,QAAShC,KACd,MAAOmC,GAAI,SAGN,QAASZ,GAAWjB,GACzB,MAAO8B,YAAa9B,GAGtB,QAAS6B,GAAIE,GACX,MAAOC,OAAMC,EAAUF,GAAKpC,KAAKuC,EAAWC,GAI9C,QAASL,GAAIC,GACX,GAAMK,GAAU,GAAIC,SAAQJ,EAAUF,GACpCO,OAAQ,UAGV,OAAON,OAAMI,GAASzC,KAAKuC,EAAWC,GAGxC,QAASD,GAAUK,GACjB,MAAOA,GAASC,OAGlB,QAASL,GAAQM,GACfC,QAAQC,IAAIF,GFoBbG,OAAOC,eAAevD,EAAS,cAC7B6B,OAAO,IAET7B,EEjDeI,WFkDfJ,EE9Ce2B,aAThB1B,EAAA,EACA,IAAAuD,GAAAvD,EAAA,GF4DKwD,EAAYtB,EAAuBqB,GE1DlCb,GAAU,EAAAc,iBFiGT,CAED,SAAS1D,EAAQC,GAEtB,YGxGc,SAAS0D,KACvB,MAAOC,GAA8B,cAAgB,yBAA2B,IAKjF,QAASA,GAA8BC,EAAMnB,GACtCA,IAAKA,EAAMoB,OAAOC,SAASC,MAChCH,EAAOA,EAAKI,QAAQ,UAAW,OAC/B,IAAIC,GAAQ,GAAIC,QAAO,OAASN,EAAO,qBACnCO,EAAUF,EAAMG,KAAK3B,EACzB,OAAK0B,GACAA,EAAQ,GACNE,mBAAmBF,EAAQ,GAAGH,QAAQ,MAAO,MAD5B,GADH,KH+FtBV,OAAOC,eAAevD,EAAS,cAC7B6B,OAAO,IAET7B,aG7GuB0D","file":"main.065941beddcd2beb22bc.js","sourcesContent":["webpackJsonp([0],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\t__webpack_require__(1);\n\t\n\tvar _userApi = __webpack_require__(3);\n\t\n\t// Populate table of users via API call.\n\t(0, _userApi.getUsers)().then(function (result) {\n\t  //use the then function on the promise to hand\n\t  var usersBody = \"\";\n\t\n\t  result.forEach(function (user) {\n\t    //Loop through the list of users returned.\n\t    usersBody += '<tr>\\n      <td><a href=\"#\" data-id=\"' + user.id + '\" class=\"deleteUser\">Delete</a></td>\\n      <td>' + user.id + '</td>\\n      <td>' + user.firstName + '</td>\\n      <td>' + user.lastName + '</td>\\n      <td>' + user.email + '</td>\\n      </tr>';\n\t  });\n\t\n\t  global.document.getElementById('users').innerHTML = usersBody; //Return a string of HTML and return within the users table we created in the html file.\n\t\n\t  var deleteLinks = global.document.getElementsByClassName('deleteUser');\n\t\n\t  // Must use array.from to create a real array from a DOM collection\n\t  // getElementsByClassname only returns an \"array like\" object\n\t  Array.from(deleteLinks, function (link) {\n\t    link.onclick = function (event) {\n\t      var element = event.target;\n\t      event.preventDefault();\n\t      (0, _userApi.deleteUser)(element.attributes[\"data-id\"].value);\n\t      var row = element.parentNode.parentNode;\n\t      row.parentNode.removeChild(row);\n\t    };\n\t  });\n\t}); //Just like importing a js file. It works.\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 2 */,\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.getUsers = getUsers;\n\texports.deleteUser = deleteUser;\n\t\n\t__webpack_require__(4);\n\t\n\tvar _baseUrl = __webpack_require__(5);\n\t\n\tvar _baseUrl2 = _interopRequireDefault(_baseUrl);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar baseUrl = (0, _baseUrl2.default)(); //what working group fetch. Browers that dont have fetch natively.\n\tfunction getUsers() {\n\t  //Only one public function. All the ones below are private\n\t  return get('users');\n\t}\n\t\n\tfunction deleteUser(id) {\n\t  //Looks at users then passes the id that it receives. Delegates to a seperate function called De l.\n\t  return del('users/' + id);\n\t}\n\t\n\tfunction get(url) {\n\t  //Actual call that uses fetch. We are only supporting get at this stage. Push, put etc are different.\n\t  return fetch(baseUrl + url).then(onSuccess, onError);\n\t}\n\t\n\t// Can't call func delete since reserved word.\n\tfunction del(url) {\n\t  //Private Del function to handle all our delete calls.\n\t  var request = new Request(baseUrl + url, {\n\t    method: 'DELETE'\n\t  });\n\t\n\t  return fetch(request).then(onSuccess, onError);\n\t}\n\t\n\tfunction onSuccess(response) {\n\t  return response.json();\n\t}\n\t\n\tfunction onError(error) {\n\t  console.log(error); // eslint-disable-line no-console\n\t}\n\n/***/ },\n/* 4 */,\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = getBaseUrl;\n\tfunction getBaseUrl() {\n\t  //Get parameter by name looking for mock API. If exists, go to local host. Otherwise, go to /\n\t  return getQueryStringParameterByName('useMockApi') ? 'http://localhost:3001/' : '/';\n\t}\n\t\n\t//This is needed to get the parameter from the URL.\n\tfunction getQueryStringParameterByName(name, url) {\n\t  if (!url) url = window.location.href;\n\t  name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n\t  var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n\t      results = regex.exec(url);\n\t  if (!results) return null;\n\t  if (!results[2]) return '';\n\t  return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n\t}\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** main.065941beddcd2beb22bc.js\n **/","import './index.css'; //Just like importing a js file. It works.\r\nimport {getUsers, deleteUser} from './api/userApi';\r\n\r\n\r\n// Populate table of users via API call.\r\ngetUsers().then(result => { //use the then function on the promise to hand\r\n  let usersBody = \"\";\r\n\r\n  result.forEach(user => { //Loop through the list of users returned.\r\n    usersBody+= `<tr>\r\n      <td><a href=\"#\" data-id=\"${user.id}\" class=\"deleteUser\">Delete</a></td>\r\n      <td>${user.id}</td>\r\n      <td>${user.firstName}</td>\r\n      <td>${user.lastName}</td>\r\n      <td>${user.email}</td>\r\n      </tr>`\r\n  });\r\n\r\n  global.document.getElementById('users').innerHTML = usersBody; //Return a string of HTML and return within the users table we created in the html file.\r\n\r\n  const deleteLinks = global.document.getElementsByClassName('deleteUser');\r\n\r\n  // Must use array.from to create a real array from a DOM collection\r\n  // getElementsByClassname only returns an \"array like\" object\r\n  Array.from(deleteLinks, link => {\r\n    link.onclick = function(event) {\r\n      const element = event.target;\r\n      event.preventDefault();\r\n      deleteUser(element.attributes[\"data-id\"].value);\r\n      const row = element.parentNode.parentNode;\r\n      row.parentNode.removeChild(row);\r\n    };\r\n   });\r\n  });\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","import 'whatwg-fetch'; //what working group fetch. Browers that dont have fetch natively.\r\nimport getBaseUrl from './baseUrl';\r\n\r\nconst baseUrl = getBaseUrl();\r\n\r\nexport function getUsers() { //Only one public function. All the ones below are private\r\n  return get('users');\r\n}\r\n\r\nexport function deleteUser(id) { //Looks at users then passes the id that it receives. Delegates to a seperate function called De l.\r\n  return del(`users/${id}`);\r\n}\r\n\r\nfunction get(url) { //Actual call that uses fetch. We are only supporting get at this stage. Push, put etc are different.\r\n  return fetch(baseUrl + url).then(onSuccess, onError);\r\n}\r\n\r\n// Can't call func delete since reserved word.\r\nfunction del(url) { //Private Del function to handle all our delete calls.\r\n  const request = new Request(baseUrl + url, {\r\n    method: 'DELETE'\r\n  });\r\n\r\n  return fetch(request).then(onSuccess, onError);\r\n}\r\n\r\nfunction onSuccess(response) {\r\n  return response.json();\r\n}\r\n\r\nfunction onError(error) {\r\n  console.log(error); // eslint-disable-line no-console\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/userApi.js\n **/","export default function getBaseUrl() { //Get parameter by name looking for mock API. If exists, go to local host. Otherwise, go to /\r\n return getQueryStringParameterByName('useMockApi') ? 'http://localhost:3001/' : '/';\r\n}\r\n\r\n\r\n//This is needed to get the parameter from the URL.\r\nfunction getQueryStringParameterByName(name, url) {\r\n  if (!url) url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\r\n  var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\r\n      results = regex.exec(url);\r\n  if (!results) return null;\r\n  if (!results[2]) return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\r\n}\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/baseUrl.js\n **/"],"sourceRoot":""}